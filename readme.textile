h1. Grbl - An embedded g-code interpreter and motion-controller for the Arduino/AVR328 microcontroller
    
Grbl is a no-compromise, high performance, low cost alternative to parallel-port-based motion control for CNC milling. It will run on a vanilla Arduino (Duemillanove/Uno) as long as it sports an Atmega 328. 

The controller is written in highly optimized C utilizing every clever feature of the AVR-chips to achieve precise timing and asynchronous operation. It is able to maintain more than 30kHz of stable, jitter free control pulses.

It accepts standards-compliant G-code and has been tested with the output of several CAM tools with no problems. Arcs, circles and helical motion are fully supported, as well as, other basic functional g-code commands. Functions and variables are not currently supported, but may be included in future releases in a form of a pre-processor.

Grbl includes full acceleration management with look ahead. That means the controller will look up to 20 motions into the future and plan its velocities ahead to deliver smooth acceleration and jerk-free cornering.

*Changelog for v0.8 from v0.7:*
  - *ALPHA STATUS*: Major structural overhaul to allow for multi-tasking events and new feature sets
  - New run-time command control: Feed hold (pause), Cycle start (resume), Reset (abort), Status report (TBD)
  - Controlled feed hold with deceleration to ensure no skipped steps and loss of location.
  - After feed hold, cycle accelerations are re-planned and may be resumed.
  - System reset re-initializes grbl without resetting the Arduino.
  - Updated dwell function.
  - Restructured planner and stepper modules to become independent and ready for future features.
  - Planned features: Jog mode, status reporting, backlash compensation, improved flow control, planner optimizations
  - Reduce serial read buffer to 127 characters and increased write buffer to 31 characters (-1 ring buffer).
  - Increased planner buffer size to 20 blocks.
  - Misc bug fixes and removed deprecated acceleration enabled code.

*Changelog for v0.7 from v0.6:*
  - Significantly improved and optimized planner re-factoring.
  - New robust cornering algorithm, enabling smoother and faster motions.
  - Arc acceleration planning enabled by efficient vector transformation implementation.
  - Stepper subsystem re-factoring to help remove some motion issues from pre-v0.7 builds.
  - Increased dwell times.
  - G92 Coordinate offset support.
  - (Beta) Limit switch and homing cycle support.
  - Many other bug fixes and efficiency improvements.

*Important note for Atmega 168 users:* Going forward, support for Atmega 168 will be dropped due to its limited memory and speed. However, legacy Grbl v0.51 "in the branch called 'v0_51' is still available for use.

_The project was initially inspired by the Arduino GCode Interpreter by Mike Ellery_
